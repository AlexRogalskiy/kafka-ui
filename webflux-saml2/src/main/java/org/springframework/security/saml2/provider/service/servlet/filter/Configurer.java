package org.springframework.security.saml2.provider.service.servlet.filter;

import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;
import org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher;
import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;

public class Configurer {

  public void configure() {
    String filterProcessesUrl = "/login/saml2/sso/{registrationId}";

    ReactiveAuthenticationManager manager = getAuthenticationManager();
    RelyingPartyRegistrationRepository repository = relyingPartyRegistrationRepository();
    ServerWebExchangeMatcher matcher = new PathPatternParserServerWebExchangeMatcher(filterProcessesUrl);

    Saml2WebSsoAuthenticationWebFilter filter = new Saml2WebSsoAuthenticationWebFilter(manager, repository);
    filter.setRequiresAuthenticationMatcher(matcher);
    filter.setServerAuthenticationConverter(new ServerSaml2AuthenticationTokenConverter(repository, matcher));
  }

  public RelyingPartyRegistrationRepository relyingPartyRegistrationRepository() {
	 		return new InMemoryRelyingPartyRegistrationRepository(this.getSaml2RelyingPartyRegistration());
	 	}

  private RelyingPartyRegistration getSaml2RelyingPartyRegistration() {
//    //remote IDP entity ID
//    String idpEntityId = "https://simplesaml-for-spring-saml.apps.pcfone.io/saml2/idp/metadata.php";
//    //remote WebSSO Endpoint - Where to Send AuthNRequests to
//    String webSsoEndpoint = "https://simplesaml-for-spring-saml.apps.pcfone.io/saml2/idp/SSOService.php";
//    //local registration ID
//    String registrationId = "simplesamlphp";
//    //local entity ID - autogenerated based on URL
//    String localEntityIdTemplate = "{baseUrl}/saml2/service-provider-metadata/{registrationId}";
//    //local signing (and decryption key)
//    Saml2X509Credential signingCredential = getSigningCredential();
//    //IDP certificate for verification of incoming messages
//    Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();
//    return RelyingPartyRegistration.withRegistrationId(registrationId)
//        .remoteIdpEntityId(idpEntityId)
//        .idpWebSsoUrl(webSsoEndpoint)
//        .credential(signingCredential)
//        .credential(idpVerificationCertificate)
//        .localEntityIdTemplate(localEntityIdTemplate)
//        .build();
    return null;
  }
}
